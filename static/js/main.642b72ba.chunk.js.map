{"version":3,"sources":["api/api.ts","hooks/useGlobalState.ts","hooks/useUpdatedRef.ts","reducers/types.ts","reducers/ip-info.ts","hooks/useRouterIpInfo.ts","components/IpAndDnsInfo/IpAndDnsInfo.tsx","hooks/useServerIpInfo.ts","hooks/useClientIpInfo.ts","reducers/vpn-clients.ts","hooks/useClients.ts","components/ClientList/ClientList.tsx","App.tsx","serviceWorker.ts","index.tsx","mock-data.js"],"names":["delay","Promise","r","setTimeout","mockData","vpnClients","id","client","find","_client","state","routerIpAddress","serverIpAddress","fetch","then","response","json","ip","dnsResults","i","hash","uuid","replace","time","Date","getTime","all","map","index","prefix","toString","repeat","url","text","dns","Object","keys","defaultCompare","stateInitialized","subscribers","createSetState","reducer","stateRootId","value","stateRoot","previousState","newState","forEach","subsriber","render","shouldUpdate","current","updateSubscriber","useGlobalState","options","useReducer","s","initialState","latestShouldUpdate","ref","useRef","useEffect","useUpdatedRef","setState","useMemo","undefined","subscriber","push","splice","indexOf","ON_CLIENTS_LOAD_START","type","ON_CLIENTS_LOAD_SUCCESS","ON_CLIENTS_LOAD_FAILURE","ON_CLIENT_ACTIVATION_START","ON_CLIENT_ACTIVATION_SUCCESS","ON_CLIENT_ACTIVATION_FAILURE","ON_CLIENT_DEACTIVATION_START","ON_CLIENT_DEACTIVATION_SUCCESS","ON_CLIENT_DEACTIVATION_FAILURE","ON_IP_INFO_LOAD_START","ON_IP_INFO_LOAD_SUCCESS","ON_IP_INFO_LOAD_FAILURE","ipInfo","isLoading","error","action","BASE_CLASS","RouterIpInfo","dispatch","Api","getRouterIP","catch","useRouterIpInfo","className","ServerIpInfo","getServerIP","useServerIpInfo","ClientIpInfo","getClientIP","getClientDNS","useClientIpInfo","IpInfo","singleDns","key","IpAndDnsInfo","clients","ClientListItem","name","onActivate","onDeactivate","isActivated","buttonText","onClick","classNames","disabled","DeviceSetup","target","ClientList","getVPNClients","activateClient","activateVPNClient","deactivateClient","deactivateVPNClient","useClients","role","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.642b72ba.chunk.js","sourcesContent":["import { v4 as uuid } from 'uuid';\nimport {\n    VPNClient,\n    IPAddressInfo,\n} from 'asus-merlin-simple-vpn-client-setup-api/src/types';\nimport mockData from 'mock-data';\n\nconst delay = (): Promise<void> => new Promise(r => setTimeout(r, 2000));\n\nclass Api {\n    /**\n     * Get list of VPN clients\n     */\n    async getVPNClients(): Promise<VPNClient[]> {\n        await delay();\n\n        return mockData.vpnClients as VPNClient[];\n    }\n\n    /**\n     * Activate given VPN client\n     * @param id VPN client ID\n     */\n    async activateVPNClient(id: number): Promise<VPNClient> {\n        await delay();\n\n        const client = mockData.vpnClients.find(\n            _client => _client.id === id\n        ) as VPNClient;\n\n        return { ...client, state: 'CONNECTED' };\n    }\n\n    /**\n     * Deactivate given VPN client\n     * @param id VPN client ID\n     */\n    async deactivateVPNClient(id: number): Promise<VPNClient> {\n        await delay();\n\n        const client = mockData.vpnClients.find(\n            _client => _client.id === id\n        ) as VPNClient;\n\n        return { ...client, state: 'DISCONNECTED' };\n    }\n\n    /**\n     * Get IP address of the router\n     */\n    async getRouterIP(): Promise<IPAddressInfo> {\n        await delay();\n\n        return mockData.routerIpAddress;\n    }\n\n    /**\n     * Get IP address of the server\n     */\n    async getServerIP(): Promise<IPAddressInfo> {\n        await delay();\n\n        return mockData.serverIpAddress;\n    }\n\n    /**\n     * Get IP address of the client\n     */\n    async getClientIP(): Promise<string> {\n        return fetch('https://ipv4.ipleak.net/json')\n            .then(response => response.json())\n            .then(json => json.ip);\n    }\n\n    /**\n     * Get DNS address of the client\n     * TODO re-use server's implementation\n     */\n    async getClientDNS(): Promise<string[]> {\n        const dnsResults: { [key: string]: boolean } = {};\n\n        // https://gist.github.com/AriPerkkio/25a37745b30aeceef311bc7f2446b28d\n        for (let i = 0; i < 5; i++) {\n            const hash = uuid().replace(/-/g, '');\n            const time = new Date().getTime();\n\n            await Promise.all(\n                [1, 2, 3, 4, 5].map(index => {\n                    const prefix = index.toString().repeat(8);\n                    const url = `https://${prefix}${hash}.ipleak.net/dnsdetect/?_=${time}`;\n\n                    return fetch(url)\n                        .then(response => response.text())\n                        .then(dns => (dnsResults[dns] = true));\n                })\n            );\n        }\n\n        return Object.keys(dnsResults);\n    }\n}\n\nexport default new Api();\n","import { useReducer, useEffect, useMemo } from 'react';\n\nimport {\n    SubsriberOptions,\n    Subscriber,\n    StateUpdater,\n    UseGlobalStateOutput,\n    ReducerType,\n    StateUpdate,\n} from './types';\nimport { useUpdatedRef } from './useUpdatedRef';\nimport { BaseActionType } from 'reducers/types';\n\nconst defaultCompare = (): boolean => true;\nconst updateSubscriber = <StateType>(\n    previousState: StateType,\n    newState: StateType\n): ((subscriber: Subscriber) => void) => (subsriber): void => {\n    const { render, shouldUpdate }: Subscriber = subsriber || {};\n    const _shouldUpdate =\n        (shouldUpdate && shouldUpdate.current) || defaultCompare;\n\n    if (_shouldUpdate(previousState, newState)) {\n        render();\n    }\n};\n\nconst state: { [key: string]: any } = {};\nconst stateInitialized: { [key: string]: boolean } = {};\nconst subscribers: { [key: string]: Subscriber<any>[] } = {};\n\nconst createSetState = <StateType>(\n    reducer: ReducerType<StateType> | undefined,\n    stateRootId: string\n): StateUpdater<StateType> => (value: StateUpdate<StateType>): void => {\n    const stateRoot = state[stateRootId] || {};\n    const previousState = { ...stateRoot } as StateType;\n\n    const newState = reducer\n        ? reducer(previousState, value as BaseActionType)\n        : { ...previousState, ...value };\n\n    state[stateRootId] = newState;\n\n    subscribers[stateRootId].forEach(updateSubscriber(previousState, newState));\n};\n\nexport const useGlobalState = <StateType extends object>(\n    options?: SubsriberOptions<StateType>\n): UseGlobalStateOutput<StateType> => {\n    const [, render] = useReducer(s => !s, true);\n    const { initialState, shouldUpdate, reducer } = options || {};\n    const stateRootId = (options || {}).stateRootId || 'root';\n\n    const latestShouldUpdate = useUpdatedRef(shouldUpdate);\n\n    const setState = useMemo(() => createSetState(reducer, stateRootId), [\n        reducer,\n        stateRootId,\n    ]);\n\n    if (!subscribers[stateRootId]) {\n        subscribers[stateRootId] = [];\n    }\n\n    if (!stateInitialized[stateRootId] && initialState) {\n        stateInitialized[stateRootId] = true;\n        createSetState(undefined, stateRootId)(initialState);\n    }\n\n    useEffect(() => {\n        const subscriber: Subscriber<StateType> = {\n            render,\n            shouldUpdate: latestShouldUpdate,\n        };\n        subscribers[stateRootId].push(subscriber);\n\n        return (): void => {\n            subscribers[stateRootId].splice(\n                subscribers[stateRootId].indexOf(subscriber),\n                1\n            );\n        };\n    }, [latestShouldUpdate, stateRootId]);\n\n    return [state[stateRootId] as StateType, setState];\n};\n","import { useEffect, useRef, MutableRefObject } from 'react';\n\nexport const useUpdatedRef = <T>(value: T): MutableRefObject<T> => {\n    const ref = useRef(value);\n\n    useEffect(() => {\n        ref.current = value;\n    }, [value]);\n\n    return ref;\n};\n","import {\n    VPNClient,\n    ErrorType,\n    IPAddressInfo,\n} from 'asus-merlin-simple-vpn-client-setup-api/src/types';\n\nexport const ON_CLIENTS_LOAD_START = { type: 'ON_CLIENTS_LOAD_START' };\nexport const ON_CLIENTS_LOAD_SUCCESS = { type: 'ON_CLIENTS_LOAD_SUCCESS' };\nexport const ON_CLIENTS_LOAD_FAILURE = { type: 'ON_CLIENTS_LOAD_FAILURE' };\n\nexport const ON_CLIENT_ACTIVATION_START = { type: 'ON_CLIENT_ACTIVATION_START' }; // prettier-ignore\nexport const ON_CLIENT_ACTIVATION_SUCCESS = { type: 'ON_CLIENT_ACTIVATION_SUCCESS' }; // prettier-ignore\nexport const ON_CLIENT_ACTIVATION_FAILURE = { type: 'ON_CLIENT_ACTIVATION_FAILURE' }; // prettier-ignore\n\nexport const ON_CLIENT_DEACTIVATION_START = { type: 'ON_CLIENT_DEACTIVATION_START' }; // prettier-ignore\nexport const ON_CLIENT_DEACTIVATION_SUCCESS = { type: 'ON_CLIENT_DEACTIVATION_SUCCESS' }; // prettier-ignore\nexport const ON_CLIENT_DEACTIVATION_FAILURE = { type: 'ON_CLIENT_DEACTIVATION_FAILURE' }; // prettier-ignore\n\nexport const ON_IP_INFO_LOAD_START = { type: 'ON_IP_INFO_LOAD_START' };\nexport const ON_IP_INFO_LOAD_SUCCESS = { type: 'ON_IP_INFO_LOAD_SUCCESS' };\nexport const ON_IP_INFO_LOAD_FAILURE = { type: 'ON_IP_INFO_LOAD_FAILURE' };\n\nexport type BaseActionType = {\n    type: string;\n    [key: string]: any;\n};\n\nexport interface ClientsLoadStartAction extends BaseActionType {\n    type: typeof ON_CLIENTS_LOAD_START.type;\n}\n\nexport interface ClientsLoadSuccessAction extends BaseActionType {\n    type: typeof ON_CLIENTS_LOAD_SUCCESS.type;\n    clients: VPNClient[];\n}\n\nexport interface ClientsLoadErrorAction extends BaseActionType {\n    type: typeof ON_CLIENTS_LOAD_FAILURE.type;\n    error: ErrorType;\n}\n\nexport interface ClientActivationStartAction extends BaseActionType {\n    type: typeof ON_CLIENT_ACTIVATION_START.type;\n    id: number;\n}\n\nexport interface ClientActivationSuccessAction extends BaseActionType {\n    type: typeof ON_CLIENT_ACTIVATION_SUCCESS.type;\n    client: VPNClient;\n}\n\nexport interface ClientActivationErrorAction extends BaseActionType {\n    type: typeof ON_CLIENT_ACTIVATION_FAILURE.type;\n    error: ErrorType;\n    id: number;\n}\n\nexport interface ClientDeactivationStartAction extends BaseActionType {\n    type: typeof ON_CLIENT_DEACTIVATION_START.type;\n    id: number;\n}\n\nexport interface ClientDeactivationSuccessAction extends BaseActionType {\n    type: typeof ON_CLIENT_DEACTIVATION_SUCCESS.type;\n    client: VPNClient;\n}\n\nexport interface ClientDeactivationErrorAction extends BaseActionType {\n    type: typeof ON_CLIENT_DEACTIVATION_FAILURE.type;\n    error: ErrorType;\n    id: number;\n}\n\nexport interface IpInfoLoadStartAction extends BaseActionType {\n    type: typeof ON_IP_INFO_LOAD_FAILURE.type;\n}\n\nexport interface IpInfoLoadSuccessAction extends BaseActionType {\n    type: typeof ON_IP_INFO_LOAD_SUCCESS.type;\n    ipInfo: IPAddressInfo;\n}\n\nexport interface IpInfoLoadErrorAction extends BaseActionType {\n    type: typeof ON_IP_INFO_LOAD_FAILURE.type;\n    error: ErrorType;\n}\n\nexport type ClientsActionTypes =\n    | ClientsLoadStartAction\n    | ClientsLoadSuccessAction\n    | ClientsLoadErrorAction\n    | ClientActivationStartAction\n    | ClientActivationSuccessAction\n    | ClientActivationErrorAction\n    | ClientDeactivationStartAction\n    | ClientDeactivationSuccessAction\n    | ClientDeactivationErrorAction;\n\nexport type IpInfoActionTypes =\n    | IpInfoLoadStartAction\n    | IpInfoLoadSuccessAction\n    | IpInfoLoadErrorAction;\n\nexport interface ClientsState {\n    isLoading: boolean;\n    error: ErrorType | null;\n    clients: VPNClient[];\n}\n\nexport interface IpInfoState {\n    isLoading: boolean;\n    error: ErrorType | null;\n    ipInfo: IPAddressInfo | null;\n}\n","import {\n    IpInfoState,\n    IpInfoActionTypes,\n    ON_IP_INFO_LOAD_START,\n    ON_IP_INFO_LOAD_SUCCESS,\n    ON_IP_INFO_LOAD_FAILURE,\n} from './types';\n\nexport const initialState: IpInfoState = {\n    ipInfo: null,\n    isLoading: false,\n    error: null,\n};\n\nexport default function reducer(\n    state: IpInfoState,\n    action: IpInfoActionTypes\n): IpInfoState {\n    switch (action.type) {\n        case ON_IP_INFO_LOAD_START.type:\n            return { ...state, isLoading: true };\n\n        case ON_IP_INFO_LOAD_SUCCESS.type:\n            const { ipInfo } = action;\n\n            return { ...state, ipInfo, isLoading: false };\n\n        case ON_IP_INFO_LOAD_FAILURE.type:\n            const { error } = action;\n\n            return { ...state, error, isLoading: false };\n\n        default:\n            return state;\n    }\n}\n","import { useEffect } from 'react';\n\nimport Api from 'api';\nimport { useGlobalState } from './useGlobalState';\nimport reducer, { initialState } from 'reducers/ip-info';\nimport {\n    IpInfoState,\n    ON_IP_INFO_LOAD_SUCCESS,\n    ON_IP_INFO_LOAD_FAILURE,\n    ON_IP_INFO_LOAD_START,\n} from 'reducers/types';\n\nexport const useRouterIpInfo = (): IpInfoState => {\n    const [state, dispatch] = useGlobalState<IpInfoState>({\n        stateRootId: 'routerIpInfo',\n        reducer,\n        initialState,\n    });\n\n    useEffect(() => {\n        dispatch(ON_IP_INFO_LOAD_START);\n\n        Api.getRouterIP()\n            .then(ipInfo => dispatch({ ...ON_IP_INFO_LOAD_SUCCESS, ipInfo }))\n            .catch(error => dispatch({ ...ON_IP_INFO_LOAD_FAILURE, error }));\n    }, [dispatch]);\n\n    return state;\n};\n","import React from 'react';\n\nimport { useRouterIpInfo } from 'hooks/useRouterIpInfo';\nimport { useServerIpInfo } from 'hooks/useServerIpInfo';\nimport { useClientIpInfo } from 'hooks/useClientIpInfo';\nimport { IpInfoState } from 'reducers/types';\n\nconst BASE_CLASS = 'ip-and-dns-info';\n\nconst IpAndDnsInfo: React.FC = () => (\n    <section className={BASE_CLASS}>\n        <header className={`${BASE_CLASS}-header`}>\n            <h2>IP and DNS</h2>\n        </header>\n\n        <RouterIpInfo />\n        <ServerIpInfo />\n        <ClientIpInfo />\n    </section>\n);\n\nconst RouterIpInfo: React.FC = () => {\n    const { ipInfo, isLoading, error } = useRouterIpInfo();\n\n    return (\n        <>\n            <p className={`${BASE_CLASS}-name`}>Router:</p>\n            <IpInfo ipInfo={ipInfo} isLoading={isLoading} error={error} />\n        </>\n    );\n};\n\nconst ServerIpInfo: React.FC = () => {\n    const { ipInfo, isLoading, error } = useServerIpInfo();\n\n    return (\n        <>\n            <p className={`${BASE_CLASS}-name`}>Server:</p>\n            <IpInfo ipInfo={ipInfo} isLoading={isLoading} error={error} />\n        </>\n    );\n};\n\nconst ClientIpInfo: React.FC = () => {\n    const { ipInfo, isLoading, error } = useClientIpInfo();\n\n    return (\n        <>\n            <p className={`${BASE_CLASS}-name`}>Client:</p>\n            <IpInfo ipInfo={ipInfo} isLoading={isLoading} error={error} />\n        </>\n    );\n};\n\nconst IpInfo: React.FC<IpInfoState> = ({\n    isLoading,\n    error,\n    ipInfo,\n}: IpInfoState) => {\n    if (isLoading) {\n        return <p className={`${BASE_CLASS}--loading`}>Loading...</p>;\n    }\n\n    if (error) {\n        return <p className={`${BASE_CLASS}--error`}>Failure</p>;\n    }\n\n    const { ip, dns } = ipInfo || {};\n\n    return (\n        <dl className={`${BASE_CLASS}-list`}>\n            <dt>IP</dt>\n            <dd>{ip}</dd>\n\n            <dt>DNS</dt>\n            <dd>\n                {(dns || []).map((singleDns, key) => (\n                    <div key={key}>{singleDns}</div>\n                ))}\n            </dd>\n        </dl>\n    );\n};\n\nexport default IpAndDnsInfo;\n","import { useEffect } from 'react';\n\nimport Api from 'api';\nimport { useGlobalState } from './useGlobalState';\nimport reducer, { initialState } from 'reducers/ip-info';\nimport {\n    IpInfoState,\n    ON_IP_INFO_LOAD_SUCCESS,\n    ON_IP_INFO_LOAD_FAILURE,\n    ON_IP_INFO_LOAD_START,\n} from 'reducers/types';\n\nexport const useServerIpInfo = (): IpInfoState => {\n    const [state, dispatch] = useGlobalState<IpInfoState>({\n        stateRootId: 'serverIpInfo',\n        reducer,\n        initialState,\n    });\n\n    useEffect(() => {\n        dispatch(ON_IP_INFO_LOAD_START);\n\n        Api.getServerIP()\n            .then(ipInfo => dispatch({ ...ON_IP_INFO_LOAD_SUCCESS, ipInfo }))\n            .catch(error => dispatch({ ...ON_IP_INFO_LOAD_FAILURE, error }));\n    }, [dispatch]);\n\n    return state;\n};\n","import { useEffect } from 'react';\n\nimport Api from 'api';\nimport { useGlobalState } from './useGlobalState';\nimport reducer, { initialState } from 'reducers/ip-info';\nimport {\n    IpInfoState,\n    ON_IP_INFO_LOAD_SUCCESS,\n    ON_IP_INFO_LOAD_FAILURE,\n    ON_IP_INFO_LOAD_START,\n} from 'reducers/types';\n\nexport const useClientIpInfo = (): IpInfoState => {\n    const [state, dispatch] = useGlobalState<IpInfoState>({\n        stateRootId: 'clientIpInfo',\n        reducer,\n        initialState,\n    });\n\n    useEffect(() => {\n        dispatch(ON_IP_INFO_LOAD_START);\n\n        Promise.all([Api.getClientIP(), Api.getClientDNS()])\n            .then(([ip, dns]) =>\n                dispatch({ ...ON_IP_INFO_LOAD_SUCCESS, ipInfo: { ip, dns } })\n            )\n            .catch(error => dispatch({ ...ON_IP_INFO_LOAD_FAILURE, error }));\n    }, [dispatch]);\n\n    return state;\n};\n","import {\n    ClientsState,\n    ClientsActionTypes,\n    ON_CLIENTS_LOAD_START,\n    ON_CLIENTS_LOAD_SUCCESS,\n    ON_CLIENTS_LOAD_FAILURE,\n    ON_CLIENT_ACTIVATION_START,\n    ON_CLIENT_ACTIVATION_SUCCESS,\n    ON_CLIENT_ACTIVATION_FAILURE,\n    ON_CLIENT_DEACTIVATION_START,\n    ON_CLIENT_DEACTIVATION_SUCCESS,\n    ON_CLIENT_DEACTIVATION_FAILURE,\n} from './types';\nimport { ConnectionState } from 'asus-merlin-simple-vpn-client-setup-api/src/types';\n\nexport const initialState: ClientsState = {\n    clients: [],\n    isLoading: false,\n    error: null,\n};\n\nexport default function reducer(\n    state: ClientsState,\n    action: ClientsActionTypes\n): ClientsState {\n    switch (action.type) {\n        case ON_CLIENTS_LOAD_START.type:\n            return { ...state, isLoading: true };\n\n        case ON_CLIENTS_LOAD_SUCCESS.type: {\n            const { clients } = action;\n\n            return { ...state, clients, isLoading: false };\n        }\n\n        case ON_CLIENTS_LOAD_FAILURE.type: {\n            const { error } = action;\n\n            return { ...state, error, isLoading: false };\n        }\n\n        case ON_CLIENT_ACTIVATION_START.type: {\n            const { id } = action;\n            const clients = state.clients.map(client => ({\n                ...client,\n                state:\n                    client.id === id\n                        ? ('CONNECTING' as ConnectionState)\n                        : client.state,\n            }));\n\n            return { ...state, clients };\n        }\n\n        case ON_CLIENT_ACTIVATION_SUCCESS.type: {\n            const { client } = action;\n            const clients = state.clients.map(_client =>\n                _client.id === client.id ? client : _client\n            );\n\n            return { ...state, clients };\n        }\n\n        case ON_CLIENT_ACTIVATION_FAILURE.type: {\n            const { error, id } = action;\n            const clients = state.clients.map(client => ({\n                ...client,\n                error: client.id === id ? error : client.error,\n            }));\n\n            return { ...state, clients };\n        }\n\n        case ON_CLIENT_DEACTIVATION_START.type: {\n            const { id } = action;\n            const clients = state.clients.map(client => ({\n                ...client,\n                state:\n                    client.id === id\n                        ? ('DISCONNECTING' as ConnectionState)\n                        : client.state,\n            }));\n\n            return { ...state, clients };\n        }\n\n        case ON_CLIENT_DEACTIVATION_SUCCESS.type: {\n            const { client } = action;\n            const clients = state.clients.map(_client =>\n                _client.id === client.id ? client : _client\n            );\n\n            return { ...state, clients };\n        }\n\n        case ON_CLIENT_DEACTIVATION_FAILURE.type: {\n            const { error, id } = action;\n            const clients = state.clients.map(client => ({\n                ...client,\n                error: client.id === id ? error : client.error,\n            }));\n\n            return { ...state, clients };\n        }\n\n        default:\n            return state;\n    }\n}\n","import { useEffect } from 'react';\n\nimport Api from 'api';\nimport { useGlobalState } from './useGlobalState';\nimport reducer, { initialState } from 'reducers/vpn-clients';\nimport {\n    ClientsState,\n    ON_CLIENTS_LOAD_START,\n    ON_CLIENTS_LOAD_SUCCESS,\n    ON_CLIENTS_LOAD_FAILURE,\n    ON_CLIENT_ACTIVATION_START,\n    ON_CLIENT_ACTIVATION_SUCCESS,\n    ON_CLIENT_ACTIVATION_FAILURE,\n    ON_CLIENT_DEACTIVATION_START,\n    ON_CLIENT_DEACTIVATION_SUCCESS,\n    ON_CLIENT_DEACTIVATION_FAILURE,\n} from 'reducers/types';\nimport { UseClientsOutput } from './types';\n\nexport const useClients = (): UseClientsOutput => {\n    const [state, dispatch] = useGlobalState<ClientsState>({\n        stateRootId: 'vpnClients',\n        reducer,\n        initialState,\n    });\n\n    useEffect(() => {\n        dispatch(ON_CLIENTS_LOAD_START);\n\n        Api.getVPNClients()\n            .then(clients => dispatch({ ...ON_CLIENTS_LOAD_SUCCESS, clients }))\n            .catch(error => dispatch({ ...ON_CLIENTS_LOAD_FAILURE, error }));\n    }, [dispatch]);\n\n    const activateClient = (id: number): void => {\n        dispatch({ ...ON_CLIENT_ACTIVATION_START, id });\n\n        Api.activateVPNClient(id)\n            .then(client =>\n                dispatch({ ...ON_CLIENT_ACTIVATION_SUCCESS, client })\n            )\n            .catch(error =>\n                dispatch({ ...ON_CLIENT_ACTIVATION_FAILURE, error, id })\n            );\n    };\n\n    const deactivateClient = (id: number): void => {\n        dispatch({ ...ON_CLIENT_DEACTIVATION_START, id });\n\n        Api.deactivateVPNClient(id)\n            .then(client =>\n                dispatch({ ...ON_CLIENT_DEACTIVATION_SUCCESS, client })\n            )\n            .catch(error =>\n                dispatch({ ...ON_CLIENT_DEACTIVATION_FAILURE, error, id })\n            );\n    };\n\n    return { ...state, activateClient, deactivateClient };\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { useClients } from 'hooks/useClients';\nimport {\n    VPNClient,\n    Client,\n    ConnectionState,\n} from 'asus-merlin-simple-vpn-client-setup-api/src/types';\n\nconst BASE_CLASS = 'client-list';\n\nconst ClientList: React.FC = () => {\n    const {\n        clients,\n        isLoading,\n        error,\n        activateClient,\n        deactivateClient,\n    } = useClients();\n\n    return (\n        <section className={BASE_CLASS}>\n            <header className={`${BASE_CLASS}-header`}>\n                <h2>VPN Clients</h2>\n            </header>\n\n            {isLoading && (\n                <div className={`${BASE_CLASS}--loading`} role='alert'>\n                    Loading\n                </div>\n            )}\n\n            {error && (\n                <div className={`${BASE_CLASS}--error`} role='alert'>\n                    Error:\n                    <div>{error.toString()}</div>\n                </div>\n            )}\n\n            <ul>\n                {clients.map(client => (\n                    <ClientListItem\n                        key={client.id}\n                        {...client}\n                        onActivate={activateClient}\n                        onDeactivate={deactivateClient}\n                    />\n                ))}\n            </ul>\n        </section>\n    );\n};\n\ninterface ClientListItemProps extends VPNClient {\n    onActivate: (id: number) => void;\n    onDeactivate: (id: number) => void;\n}\n\nconst ClientListItem: React.FC<ClientListItemProps> = ({\n    id,\n    name,\n    state,\n    clients,\n    onActivate,\n    onDeactivate,\n}: ClientListItemProps) => {\n    const isActivated = state === ('CONNECTED' as ConnectionState);\n    const isLoading = state === 'CONNECTING' || state === 'DISCONNECTING';\n\n    const buttonText = isActivated ? 'Deactivate' : 'Activate';\n    const onClick = isActivated ? onDeactivate : onActivate;\n\n    return (\n        <li key={id} className={`${BASE_CLASS}-item`}>\n            <span className={`${BASE_CLASS}-item-name`}>{name}</span>\n            <span\n                className={classNames(\n                    `${BASE_CLASS}-item-state`,\n                    `${BASE_CLASS}-item-state--${\n                        isActivated ? 'connected' : 'disconnected'\n                    }`,\n                    isLoading && `${BASE_CLASS}-item-state--loading`\n                )}>\n                {state}\n            </span>\n            <button\n                disabled={isLoading}\n                onClick={(): void => {\n                    onClick(id);\n                }}\n                className={`${BASE_CLASS}-item-toggle`}>\n                {isLoading ? '...' : buttonText}\n            </button>\n\n            <div className={`${BASE_CLASS}-item-devices`}>\n                <ul>{clients.map(DeviceSetup)}</ul>\n            </div>\n        </li>\n    );\n};\n\nconst DeviceSetup: React.FC<Client> = ({ name, ip, target, type }: Client) => (\n    <li key={ip}>\n        <dl className={`${BASE_CLASS}-item-devices-list`}>\n            <dt>Name</dt>\n            <dd>{name}</dd>\n\n            <dt>IP</dt>\n            <dd>{ip}</dd>\n\n            <dt>Target</dt>\n            <dd>{target}</dd>\n\n            <dt>Type</dt>\n            <dd>{type}</dd>\n        </dl>\n    </li>\n);\n\nexport default ClientList;\n","import React from 'react';\n\nimport IpAndDnsInfo from 'components/IpAndDnsInfo';\nimport ClientList from 'components/ClientList';\n\nconst App: React.FC = () => (\n    <>\n        <header className='app-header'>\n            <h1>Asus Merlin Simple VPN Client setup</h1>\n        </header>\n\n        <main className='app-content'>\n            <IpAndDnsInfo />\n            <ClientList />\n        </main>\n    </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const vpnClients = [\n    {\n        id: 1,\n        name: 'Client Number One',\n        state: 'DISCONNECTED',\n        clients: [\n            {\n                name: 'Device One',\n                ip: '192.168.1.10',\n                target: '0.0.0.0',\n                type: 'VPN',\n            },\n        ],\n    },\n    {\n        id: 2,\n        name: 'Client Number Two, Extended Name',\n        state: 'DISCONNECTED',\n        clients: [\n            {\n                name: 'Device One',\n                ip: '192.168.1.10',\n                target: '0.0.0.0',\n                type: 'VPN',\n            },\n        ],\n    },\n    {\n        id: 3,\n        name: 'Third Client',\n        state: 'DISCONNECTED',\n        clients: [\n            {\n                name: 'Device One',\n                ip: '192.168.1.10',\n                target: '0.0.0.0',\n                type: 'VPN',\n            },\n        ],\n    },\n    {\n        id: 4,\n        name: 'Fourth Client, Extended name',\n        state: 'CONNECTED',\n        clients: [\n            {\n                name: 'Device Number Two',\n                ip: '192.168.1.11',\n                target: '0.0.0.0',\n                type: 'VPN',\n            },\n        ],\n    },\n    {\n        id: 5,\n        name: 'Client Number Five',\n        state: 'CONNECTED',\n        clients: [\n            {\n                name: 'All IPs',\n                ip: '192.168.1.2/24',\n                target: '0.0.0.0',\n                type: 'VPN',\n            },\n            {\n                name: 'Device number three',\n                ip: '192.168.1.12',\n                target: '0.0.0.0',\n                type: 'WAN',\n            },\n            {\n                name: 'Device number four',\n                ip: '192.168.1.13',\n                target: '0.0.0.0',\n                type: 'WAN',\n            },\n            {\n                name: 'Device number five',\n                ip: '192.168.1.14',\n                target: '0.0.0.0',\n                type: 'WAN',\n            },\n        ],\n    },\n];\n\nconst serverIpAddress = {\n    ip: '11.11.111.111',\n    dns: ['22.22.222.222', '33.33.333.333'],\n};\n\nconst routerIpAddress = {\n    ip: '44.44.444.444',\n    dns: ['55.55.555.555', '66.66.666.666'],\n};\n\nmodule.exports = {\n    vpnClients,\n    serverIpAddress,\n    routerIpAddress,\n};\n"],"sourceRoot":""}